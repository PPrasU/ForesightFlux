<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use App\Models\DataAPI;
use App\Models\DataSource;
use Carbon\Carbon;

class DataAPIController extends Controller
{
    public function index(){
        $data = DataAPI::all();
        return view('dataAPI', compact('data')); 
    }

    public function input(){
        $dataSource = DataSource::all();
        $dataAPI = DataAPI::all();
    
        // Ambil list pasangan kripto dari Kraken
        $pairsResponse = Http::get("https://api.kraken.com/0/public/AssetPairs");
        $pairsData = $pairsResponse->json();
    
        $pairs = [];
        if (isset($pairsData['result'])) {
            foreach ($pairsData['result'] as $key => $value) {
                if (str_ends_with($key, "USD")) { // hanya ambil pair ke USD
                    $pairs[$key] = $value['altname'] ?? $key;
                }
            }
        }
    
        return view('input/dataAPI', compact('dataSource', 'dataAPI', 'pairs'));
    }

    // public function input(){
    //     try {
    //         $pairsResponse = Http::withOptions([
    //             'verify' => false,
    //             'timeout' => 10,
    //         ])->get("https://api.kraken.com/0/public/AssetPairs");
    
    //         $pairsData = $pairsResponse->json();
    //     } catch (\Exception $e) {
    //         return back()->with('error', 'Gagal terhubung ke Kraken API: ' . $e->getMessage());
    //     }
    
    //     $dataSource = DataSource::all();
    //     $dataAPI = DataAPI::all();
    
    //     $pairs = [];
    //     if (isset($pairsData['result'])) {
    //         foreach ($pairsData['result'] as $key => $value) {
    //             if (str_ends_with($key, "USD")) {
    //                 $pairs[$key] = $value['altname'] ?? $key;
    //             }
    //         }
    //     }
    
    //     return view('input/dataAPI', compact('dataSource', 'dataAPI', 'pairs'));
    // }
    

    public function post(Request $request)
    {
        // Validasi form input
        $request->validate([
            'crypto_pair' => 'required',
            'date-start' => 'required|date',
            'date-end' => 'required|date|after_or_equal:date-start',
            'sumber' => 'required',
        ]);

        //mapping nama kripto
        $displayNames = [
            'XBTUSD' => 'Bitcoin to USD',
            'ETHUSD' => 'Ethereum to USD',
            // tambahkan lainnya jika perlu
        ];
        
        $displayName = $displayNames[$request->crypto_pair] ?? $request->crypto_pair;
    
        // 1. Simpan data ke tabel data_source
        $dataSource = DataSource::create([
            'name' => $request->crypto_pair,
            'display_name' => $displayName,
            'periode_awal' => $request['date-start'],
            'periode_akhir' => $request['date-end'],
            'sumber' => $request->sumber,
        ]);
    
        // 2. Siapkan parameter untuk Kraken API
        $startTime = Carbon::parse($request['date-start'])->timestamp;
        $endTime = Carbon::parse($request['date-end'])->timestamp;
        $pair = $request->crypto_pair;
        $interval = 1440; // daily
    
        // 3. Panggil Kraken API
        $response = Http::get("https://api.kraken.com/0/public/OHLC", [
            'pair' => $pair,
            'interval' => $interval,
            'since' => $startTime,
        ]);
    
        $data = $response->json();
    
        // Jika gagal mengambil data
        if (!isset($data['result'])) {
            return back()->with('error', 'Gagal mengambil data dari Kraken.');
        }
    
        // 4. Ambil nama pair dari hasil response
        $pairKey = array_key_first($data['result']);
    
        // 5. Iterasi data dan simpan ke tabel data_api
        foreach ($data['result'][$pairKey] as $item) {
            $timestamp = $item[0];
            $date = Carbon::createFromTimestamp($timestamp)->format('Y-m-d');
    
            // Pastikan tanggal dalam range yang diminta user
            if (Carbon::parse($date)->between($request['date-start'], $request['date-end'])) {
                // Menyimpan data ke tabel data_api
                DataAPI::create([
                    'source_id' => $dataSource->id,
                    'date' => $date,
                    'open' => $item[1],
                    'high' => $item[2],
                    'low' => $item[3],
                    'close' => $item[4],
                ]);
            }
        }
    
        return redirect()->route('data.dataAPI')->with('success', 'Data berhasil diambil dan disimpan.');
    }

    public function hapus(){
        $data = DataAPI::all();
        $data->delete();
        return redirect()->route('index')->with('Success', 'Data API Berhasil Dihapus');
    }
}
